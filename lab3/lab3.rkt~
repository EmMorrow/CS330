#lang racket

(define (check-temps1 temps)
  (andmap (lambda (i) (and (> i 4) (< i 96))) temps))
 
(define (check-temps temps low high)
  (andmap (lambda (i) (and (> i (- low 1)) (< i (+ high 1)))) temps))

(define (duple lst)
  (map (lambda (i) (list i i)) lst))

(define (average lst)
  (/ (foldr + 0 lst) (length lst)))

(define (convertFC temps)
  (map (lambda (i) (* (- i 32) 5/9))
       temps))



(define (help list factor num)
  (if (null? list)
      num
      (help (rest list) (* factor 10) (+ num (* factor (first list))))))

(define (convert digits)
  (map (lambda (i j) (* i j)) digits 1))

(convert (list 1 2 3))



(define (get-rid num lst)
  (if (null? lst)
      false
      (if (> num (first lst))
          true
          (get-rid num (rest lst)))))

(define (trav-list index newlst lst)
  (if (null? lst)
      newlst
      (if (get-rid (first lst) (rest lst))
          (trav-list (+ index 1) newlst (rest lst))
          (trav-list (+ index 1) (append newlst (list (first lst))) (rest lst)))))
      
      
(define (eliminate-larger lst)
  (filter (lambda (i) (get-rid i lst)) lst))


(convertFC (list 32 50 212))
(duple (list 1 2 3))
(average (list 1 2 3))
(check-temps1 (list 6 7 94))
(check-temps (list 5 7 96) 5 96)

  
      
  
 
  
  